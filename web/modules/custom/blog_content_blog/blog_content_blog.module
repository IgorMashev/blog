<?php

/**
 * @file
 * Primary module hooks for Blog - content blog module.
 */

use \Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use \Drupal\node\NodeInterface;
use \Drupal\Component\Utility\Html;

function blog_content_blog_theme($existing, $type, $theme, $path) {
  return [
    'blog_content_blog_related_posts' => [
      'variables' => [

      ],
      'file' => 'blog_content_blog.theme.inc',
    ],
  ];
}

/**
 * Implements hook_entity_extra_field_info().
 */
function blog_content_blog_entity_extra_field_info() {
  $extra = [];


  $extra['node']['blog']['display']['estimated_read_time'] = [
    'label' => t('Estimated read time'),
    'weight' => 100,
    'visible' => FALSE,
  ];

  $extra['node']['blog']['display']['previous_next_blog'] = [
    'label' => t('Buttons to previous and next blog node'),
    'weight' => 100,
    'visible' => FALSE,
  ];

  $extra['node']['blog']['display']['social_share'] = [
    'label' => t('Links to share'),
    'weight' => 100,
    'visible' => FALSE,
  ];

  $extra['node']['blog']['display']['related_posts'] = [
    'label' => t('Related posts'),
    'weight' => 100,
    'visible' => FALSE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view.
 */
function blog_content_blog_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  $bem_block = Html::getClass('node-' . $node->bundle() . ($view_mode == 'default' ?: '-' . $view_mode));
  if ($display->getComponent('estimated_read_time')) {
    $node_paragraphs = $node->get('field_content')->referencedEntities();
    $estimated_read_time = _blog_content_blog_estimated_read_time($node_paragraphs);
    $build['estimated_read_time'] = [
      '#type' => 'inline_template',
      '#template' => '<div class="{{ bem_block }}__estimated-read-time">{{ estimated_read_time }} min.</div>',
      '#context' => [
        'bem_block' => $bem_block,
        'estimated_read_time' => $estimated_read_time,
      ]
    ];
  }

  if ($display->getComponent('previous_next_blog')) {
    $build['previous_next'] = [
      '#theme' => 'blog_previous_next__blog_article',
      '#entity' => $node,
    ];
  }

  if ($display->getComponent('social_share')) {
    $build['social_share'] = [
      '#theme' => 'blog_social_share',
      '#url' => $node->toUrl()->toString(TRUE)->getGeneratedUrl(),
      '#label' => $node->label(),
    ];
  }

  if ($display->getComponent('related_posts')) {
    $build['related_posts'] = [
      '#theme' => 'blog_content_blog_related_posts',
    ];
  }
}

/**
 * Calculates estimated read time for article.
 *
 * @param \Drupal\paragraphs\ParagraphInterface[] $paragraphs
 *  An array with paragraphs.
 *
 * @return float
 *  The estimated read time in minutes.
 */
function _blog_content_blog_estimated_read_time(array $paragraphs) {
  $word_per_minute = 143;
  $estimated_read_time = 0;

  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  foreach ($paragraphs as $paragraph) {
    switch ($paragraph->bundle()) {
      case 'text':
        $word_count = str_word_count(strip_tags($paragraph->get('field_body')->value));
        $estimated_read_time += floor(($word_count/$word_per_minute)*60);
        break;

      case 'gallery':
        $estimated_read_time += 15;
        break;

      case 'image_text':
        $word_count = str_word_count(strip_tags($paragraph->get('field_body')->value));
        $estimated_read_time += floor(($word_count/$word_per_minute)*60) + 7;
        break;

      case 'image':
        $estimated_read_time += 7;
        break;

      case 'code':
        $word_count = str_word_count(strip_tags($paragraph->get('field_body')->value));
        $estimated_read_time += floor(($word_count/$word_per_minute/2)*60);
        break;
    }

    return ceil($estimated_read_time / 60);
  }

}
